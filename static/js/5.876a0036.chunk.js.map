{"version":3,"sources":["components/Notification.js","actions/addfriends.js","actions/removefriend.js","actions/recommend.js","components/Recommend.js"],"names":["Notification","props","className","itemcls","message","addfriend","friend","id","type","ADDFRIEND","removefriend","REMOVEFRIEND","recommend","name","movie","RECOMMEND","opts","height","width","playerVars","autoplay","Recommend","handlePlaying","state","trailerURL","setState","videoclass","playing","movieTrailer","then","url","URLParams","URLSearchParams","URL","search","prevState","get","catch","error","console","log","handleAddFriend","e","friendList","friendName","target","value","toLowerCase","notification","handleSubmitFriend","preventDefault","Math","floor","random","dispatch","friendLists","hasOwnProperty","length","handleDelete","recommendMovie","item","movieName","location","this","friendsLists","movieDetails","Object","keys","map","index","key","charAt","toUpperCase","substring","onClick","filter","onSubmit","placeholder","onChange","videoId","movieRating","movieTotal","Component","withRouter","connect"],"mappings":"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","file":"static/js/5.876a0036.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./css//Notification.css\";\n\nconst Notification = (props) => {\n  return <div className={`${props.itemcls} ${\"error\"}`}>{props.message}</div>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import { ADDFRIEND } from \"../constants\";\n\nfunction addfriend(friend, id) {\n  return {\n    type: ADDFRIEND,\n    friend,\n    id,\n  };\n}\n\nexport default addfriend;\n","import { REMOVEFRIEND } from \"../constants\";\n\nfunction removefriend(friend) {\n  return {\n    type: REMOVEFRIEND,\n    friend,\n  };\n}\n\nexport default removefriend;\n","import { RECOMMEND } from \"../constants\";\n\nfunction recommend(name, movie) {\n  return {\n    type: RECOMMEND,\n    name,\n    movie,\n  };\n}\n\nexport default recommend;\n","import React, { Component } from \"react\";\nimport apicall from \"../utils/API\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./css/Recommend.css\";\nimport YouTube from \"react-youtube\";\nimport Notification from \"./Notification\";\nimport movieTrailer from \"movie-trailer\";\nimport { connect } from \"react-redux\";\nimport addfriend from \"../actions/addfriends\";\nimport removefriend from \"../actions/removefriend\";\nimport recommend from \"../actions/recommend\";\nimport { Link } from \"react-router-dom\";\nimport store from \"../store\";\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\n\nconst opts = {\n  height: \"390\",\n  width: \"900\",\n  playerVars: { autoplay: 1 },\n};\n\nclass Recommend extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      item: this.props.location?.state,\n      trailerURL: \"\",\n      friend: \"\",\n      friendList: {},\n      notification: false,\n    };\n  }\n\n  handlePlaying = (movie) => {\n    const { trailerURL } = this.state;\n    if (trailerURL) {\n      this.setState({\n        trailerURL: \"\",\n        videoclass: \"\",\n        playing: false,\n      });\n    } else {\n      movieTrailer(movie)\n        .then((url) => {\n          const URLParams = new URLSearchParams(new URL(url).search);\n          this.setState((prevState) => ({\n            trailerURL: URLParams.get(\"v\"),\n          }));\n        })\n        .catch((error) => console.log(\"An error occured\"));\n    }\n  };\n\n  handleAddFriend = (e, friendList) => {\n    let friendName = e.target.value;\n\n    if (!friendList[friendName.toLowerCase()]) {\n      this.setState({\n        friend: e.target.value,\n        notification: false,\n      });\n    }\n\n    if (friendList[`${friendName.toLowerCase()}`]) {\n      this.setState({ notification: true });\n    }\n  };\n\n  handleSubmitFriend = (e) => {\n    e.preventDefault();\n    const { friend } = this.state;\n    const id = Math.floor(Math.random() * 1267);\n    const { dispatch, friendLists } = this.props;\n    if (!friendLists?.hasOwnProperty(friend.toLowerCase()) && friend.length) {\n      this.setState({ friend: \"\" });\n      dispatch(addfriend(friend.toLowerCase(), id));\n    }\n\n    if (!friend) {\n      this.setState({ notification: true });\n    }\n  };\n\n  handleDelete = (name) => {\n    const { dispatch } = this.props;\n    dispatch(removefriend(name));\n  };\n\n  recommendMovie = (name) => {\n    const { dispatch } = this.props;\n    const { item } = this.state;\n    dispatch(recommend(name, item.movieName));\n  };\n\n  componentDidMount() {\n    const { item } = this.state;\n    this.handlePlaying(item.movieName);\n  }\n\n  render() {\n    const { item, trailerURL, friend, friendList, notification } = this.state;\n    const { friendsLists } = this.props;\n    return (\n      <div className=\"recommendationContainer\">\n        <div className=\"mainRecommendDetails\">\n          <h1 className=\"recTitle\">{item.movieName}</h1>\n          <p className=\"recDetails\">{item.movieDetails}</p>\n          {Object.keys(friendsLists).length > 0 &&\n            Object.keys(friendsLists).map((name, index) => (\n              <div className=\"eachName\" key={index}>\n                <div className=\"one\">\n                  {friendsLists[name].name.charAt(0).toUpperCase() +\n                    friendsLists[name].name.substring(1)}\n                </div>\n                <div className=\"two\">\n                  <button\n                    className=\"recommendBtn\"\n                    onClick={() => this.recommendMovie(name)}\n                  >\n                    {friendsLists[name][\"movies\"].length > 0 &&\n                    friendsLists[name][\"movies\"].filter(\n                      (movie) => movie === item.movieName\n                    ).length > 0\n                      ? \"UnRecommend\"\n                      : \"Recommend\"}\n                  </button>\n                </div>\n                <div className=\"three\">\n                  <button\n                    className=\"deleteFriendbtn\"\n                    onClick={() => this.handleDelete(name)}\n                  >\n                    x\n                  </button>\n                </div>\n              </div>\n            ))}\n          {Object.keys(friendsLists).length <= 4 && (\n            <div>\n              (\n              <form onSubmit={this.handleSubmitFriend}>\n                <input\n                  type=\"text\"\n                  className=\"addField\"\n                  placeholder=\"add new friend\"\n                  value={friend}\n                  onChange={(e) => this.handleAddFriend(e, friendsLists)}\n                />\n                <button className=\"addBtn\">Add Friend</button>\n              </form>\n              )\n            </div>\n          )}\n          {notification && (\n            <Notification\n              itemcls={\"fadeIn\"}\n              message={\"Friend already added to list\"}\n            />\n          )}\n          {notification && !friend.length && (\n            <Notification\n              itemcls={\"fadeIn\"}\n              message={\"Error!!! name cannot be blank\"}\n            />\n          )}\n        </div>\n        <div className=\"mainRecommendMovie\">\n          {<YouTube videoId={trailerURL} opts={opts} />}\n          <p className=\"votes\">\n            {item.movieRating}/10 out of {item.movieTotal} votes\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nRecommend.propTypes = {\n  category: PropTypes.number,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    friendsLists: state.recommend,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(Recommend));\n"],"sourceRoot":""}